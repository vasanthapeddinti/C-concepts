### Varibles and constants

# Variables

    1. Local variables (automatic variables): They are automatically deleted after the function is executed
    2. Global varibles: 

    3. extern variables: Variables that can be accessed by name by any function. Since external
    variables are globally accessible, they can be used instead of argument lists to communicate data between 
    functions. An external variable has to be defined, exactly once, outside of any function.
    The variable must be declared in each function that wants to access it. 

    4. External and static variables are initialized to zero by default.

    5. Automatic variables for which there is no explicit initializer have garbage values

# Data types

| Data types    | Qualifiers    | 
| ------------- | ------------- | 
| char          | short         |
| int           | long          |
| float         | signed        |
| double        | unsigned      |
|               | const         |

format specifiers:
* %e - represents the data in exponential power(scientific format), 'e' would be 
  by default mean exponential power 10.

* %g represents the decimal format of the answer, depending upon whose length is
  smaller, comparing between %e and %f.

Ex:
123.45 * 10^8, it will print it as 1.2345e+10
%f : 12345000000.000000 & %e : 1.234500e+10

After removing succeeding zeros
%f : 12345000000 & %e : 1.2345e+10

%e gives shorted result. So, %g prints 1.2345e+10
 
# Constants

Escape sequences
| \a   | alert            | 
| \b   | backspace        |
| \f   | formfeed         |
| \n   | new line         |
| \r   | carriage return  |
| \t   | horizontal tab   |
| \v   | vertical tab     |
| \\   | backslash        |
| \?   | question mark    |
| \'   | single quote     |
| \"   | double quote     |
| \ooo | octal number     |
| \xhh | hex number       |
| \0   | null character   |

Ex:
    // octal 
    #define VTAB '\013'

    // hex
    #define VTAB '\xb'

character constant is defined by ' ' and represented in numeric value on machine
ex: 'b'

string constant is defined by " " and respresented in array of characters
ex: "b"

enumeration constant is a list of constant integer values
ex: 
    enum boolean {
        FIRST  = 1,
        SECOND
    };

# Bitwise Operations

| ------------- | ------------- |
| &             | AND           |
| |             | OR            |
| ^             | ex OR         |
| <<            | left shift    |
| >>            | right shift   |
| >>            | complement    |
| ------------- | ------------- |

* AND is used to mask off some set of bits
* OR is used to turn bits ON
* ex OR sets a one in each bit position where it's operands have different bits,
  and zero where they are same
* y << x ===> multiplication of 2^x to y
* y >> x ===> division of y and 2^x
* Two's complement is the most common method of representing signed (positive, negative,
  and zero) integers on computers, and more generally, fixed point binary values.
* 2' complement is 1's complement + 1
* 2’s complement has this nice property that first bit is a sign bit because all 
  positive starts with 0 whereas all negative with 1
* https://stackoverflow.com/questions/1125304/why-prefer-twos-complement-over-sign-and-magnitude-for-signed-numbers
* Subtraction of two Binary Numbers, subtract two binary numbers using 2’s Complement method. 
Step-1: Find the 2’s complement of the subtrahend.
Step-2: Add the first number and 2’s complement of the subtrahend.
Step-3: If a carry is produced, discard the carry. If there is no carry then take the 2’s 
complement of the result.
